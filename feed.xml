<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-02-16T10:01:55+08:00</updated><id>http://localhost:4000/</id><title type="html">Rendered Obsolete</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/02/15/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-02-15T16:02:18+08:00</published><updated>2018-02-15T16:02:18+08:00</updated><id>http://localhost:4000/jekyll/update/2018/02/15/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/02/15/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Xamarin.Forms on OSX</title><link href="http://localhost:4000/2017/12/31/xamarinforms-on-osx.html" rel="alternate" type="text/html" title="Xamarin.Forms on OSX" /><published>2017-12-31T08:05:00+08:00</published><updated>2017-12-31T08:05:00+08:00</updated><id>http://localhost:4000/2017/12/31/xamarinforms-on-osx</id><content type="html" xml:base="http://localhost:4000/2017/12/31/xamarinforms-on-osx.html">Not sure how I missed this, but &lt;a href=&quot;https://blog.xamarin.com/preview-bringing-macos-to-xamarin-forms/&quot;&gt;Xamarin.Forms now has preview support for Mac OSX clients&lt;/a&gt;.&amp;nbsp; This is really exciting and I hope they decide to finalize support for OSX as a first-class target.&lt;br /&gt;&lt;br /&gt;I spend fair amount of time on OSX, so one of my biggest gripes about Forms was lack of support for a native Mac client.&amp;nbsp; On Windows I can target UWP and run projects directly on Windows 10.&amp;nbsp; But, on OSX I have to launch either the iOS or Android target.&amp;nbsp; Not a deal breaker, but certainly cumbersome.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://www.mvvmcross.com/&quot;&gt;MvvmCross&lt;/a&gt;&amp;nbsp;promises to be a Xamarin.Forms-like MVVM framework that targets more platforms.&amp;nbsp; But, it seems OSX clients are &lt;a href=&quot;https://stackoverflow.com/questions/28234584/mvvmcross-on-xamarin-mac&quot;&gt;languishing as a low-priority concern&lt;/a&gt; for that project.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Working Client&lt;/h3&gt;&lt;div&gt;The &lt;a href=&quot;https://blog.xamarin.com/preview-bringing-macos-to-xamarin-forms/&quot;&gt;xamarin blog's&lt;/a&gt;&amp;nbsp;instructions mostly worked.&amp;nbsp; I added a Cocoa app with the latest version of Xamarin.Forms on nuget (2.5.0) to my Forms solution, and made the required changes.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Everything built, but when I launched it I got a System.NullReferenceException:&lt;/div&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt;1:  Xamarin.Forms.Platform.MacOS.FormsApplicationDelegate.UpdateMainMenu() in   &lt;br /&gt;2:  Xamarin.Forms.Platform.MacOS.FormsApplicationDelegate.DidFinishLaunching(Foundation.NSNotification notification) in   &lt;br /&gt;3:  mobile_app.OSX.AppDelegate.DidFinishLaunching(Foundation.NSNotification notification) in /Users/jake/jade/jade/mobile_app/mobile_app.OSX/AppDelegate.cs:33  &lt;br /&gt;4:  AppKit.NSApplication.NSApplicationMain() in   &lt;br /&gt;5:  AppKit.NSApplication.Main(string[] args) in /Users/builder/data/lanes/5489/c4240f3f/source/xamarin-macios/src/AppKit/NSApplication.cs:100  &lt;br /&gt;6:  mobile_app.OSX.MainClass.Main(string[] args) in /Users/jake/jade/jade/mobile_app/mobile_app.OSX/Main.cs:12  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;I found &lt;a href=&quot;https://forums.xamarin.com/discussion/comment/309181/#Comment_309181&quot;&gt;the solution in the xamarin forums&lt;/a&gt;.&amp;nbsp; Need to change the initialization of NSApplication in &lt;b&gt;Main.cs&lt;/b&gt;:&lt;br /&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt;1:  static void Main(string[] args)  &lt;br /&gt;2:  {  &lt;br /&gt;3:    NSApplication.Init();  &lt;br /&gt;4:    NSApplication.SharedApplication.Delegate = new AppDelegate();  &lt;br /&gt;5:    NSApplication.SharedApplication.MainMenu = new NSMenu();  // FIX  &lt;br /&gt;6:    NSApplication.Main(args);  &lt;br /&gt;7:  }  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Line 5 is the added line.&lt;br /&gt;&lt;br /&gt;Giving me a working- albeit embarrassingly trivial- app:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-72miX0FI9Ko/WkgpQo-QruI/AAAAAAAACys/A-f1e5olUAocP1BQyaJpEXBmwFZEx0HhQCLcBGAs/s1600/Screen%2BShot%2B2017-12-31%2Bat%2B08.01.35.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;694&quot; data-original-width=&quot;858&quot; height=&quot;258&quot; src=&quot;https://3.bp.blogspot.com/-72miX0FI9Ko/WkgpQo-QruI/AAAAAAAACys/A-f1e5olUAocP1BQyaJpEXBmwFZEx0HhQCLcBGAs/s320/Screen%2BShot%2B2017-12-31%2Bat%2B08.01.35.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span id=&quot;goog_725635082&quot;&gt;&lt;/span&gt;&lt;span id=&quot;goog_725635083&quot;&gt;&lt;/span&gt;&lt;br /&gt;</content><author><name>Contact:</name></author><category term="osx" /><category term="c#" /><category term="xamarin.forms" /><summary type="html">Not sure how I missed this, but Xamarin.Forms now has preview support for Mac OSX clients.&amp;nbsp; This is really exciting and I hope they decide to finalize support for OSX as a first-class target.I spend fair amount of time on OSX, so one of my biggest gripes about Forms was lack of support for a native Mac client.&amp;nbsp; On Windows I can target UWP and run projects directly on Windows 10.&amp;nbsp; But, on OSX I have to launch either the iOS or Android target.&amp;nbsp; Not a deal breaker, but certainly cumbersome.MvvmCross&amp;nbsp;promises to be a Xamarin.Forms-like MVVM framework that targets more platforms.&amp;nbsp; But, it seems OSX clients are languishing as a low-priority concern for that project.Working ClientThe xamarin blog's&amp;nbsp;instructions mostly worked.&amp;nbsp; I added a Cocoa app with the latest version of Xamarin.Forms on nuget (2.5.0) to my Forms solution, and made the required changes.Everything built, but when I launched it I got a System.NullReferenceException:1: Xamarin.Forms.Platform.MacOS.FormsApplicationDelegate.UpdateMainMenu() in 2: Xamarin.Forms.Platform.MacOS.FormsApplicationDelegate.DidFinishLaunching(Foundation.NSNotification notification) in 3: mobile_app.OSX.AppDelegate.DidFinishLaunching(Foundation.NSNotification notification) in /Users/jake/jade/jade/mobile_app/mobile_app.OSX/AppDelegate.cs:33 4: AppKit.NSApplication.NSApplicationMain() in 5: AppKit.NSApplication.Main(string[] args) in /Users/builder/data/lanes/5489/c4240f3f/source/xamarin-macios/src/AppKit/NSApplication.cs:100 6: mobile_app.OSX.MainClass.Main(string[] args) in /Users/jake/jade/jade/mobile_app/mobile_app.OSX/Main.cs:12 I found the solution in the xamarin forums.&amp;nbsp; Need to change the initialization of NSApplication in Main.cs:1: static void Main(string[] args) 2: { 3: NSApplication.Init(); 4: NSApplication.SharedApplication.Delegate = new AppDelegate(); 5: NSApplication.SharedApplication.MainMenu = new NSMenu(); // FIX 6: NSApplication.Main(args); 7: } Line 5 is the added line.Giving me a working- albeit embarrassingly trivial- app:</summary></entry><entry><title type="html">Windows 10 IoT Core on Raspberry Pi 3</title><link href="http://localhost:4000/2017/12/25/windows-10-iot-core-on-raspberry-pi-3.html" rel="alternate" type="text/html" title="Windows 10 IoT Core on Raspberry Pi 3" /><published>2017-12-25T04:34:00+08:00</published><updated>2017-12-25T04:34:00+08:00</updated><id>http://localhost:4000/2017/12/25/windows-10-iot-core-on-raspberry-pi-3</id><content type="html" xml:base="http://localhost:4000/2017/12/25/windows-10-iot-core-on-raspberry-pi-3.html">Following up on&amp;nbsp;&lt;a href=&quot;http://rendered-obsolete.blogspot.com/2017/11/win10-iot-core-redux.html&quot;&gt;my last post&lt;/a&gt;, finally got around to trying to install IoT Core on my actual Raspberry Pi device:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;Raspberry Pi 3 model B&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-touch-display/&quot;&gt;7&quot; Touchscreen&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;My development machine is a &lt;a href=&quot;https://support.apple.com/kb/SP756?locale=en_US&quot;&gt;15&quot; Macbook Pro&lt;/a&gt; running&amp;nbsp;&lt;span style=&quot;font-family: &amp;quot;calibri&amp;quot;; font-size: 11pt;&quot;&gt;OSX High Sierra (10.3.2).&amp;nbsp; Wasn't able to get a Windows 10 VM in VirtualBox to recognize the SD card slot in my adapter (the otherwise fantastic &lt;a href=&quot;https://satechi.net/collections/usb-type-c/products/satechi-aluminum-multi-port-adapter-4k&quot;&gt;Satechi type-C multi-port adapater&lt;/a&gt;), so started looking for how to flash the image without using &lt;a href=&quot;https://developer.microsoft.com/en-us/windows/iot/Downloads&quot;&gt;IoT Core Dashboard&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Image Preparation&lt;/h3&gt;Microsoft has some docs about using &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/iot-core/connect-your-device/dism&quot;&gt;dism&lt;/a&gt;&amp;nbsp;instead of Dashboard.&amp;nbsp; From the&amp;nbsp;&lt;a href=&quot;https://developer.microsoft.com/en-us/windows/iot/Downloads&quot;&gt;IoT Core download page&lt;/a&gt;&amp;nbsp;you can obtain an iso file containing an msi that by default installs the image to: &lt;br /&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; C:\Program Files (x86)\Microsoft IoT\FFU\RaspberryPi2\flash.ffu  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;ffu2img (&lt;a href=&quot;https://github.com/t0x0/random/wiki/ffu2img&quot; style=&quot;font-size: 11pt;&quot;&gt;https://github.com/t0x0/random/wiki/ffu2img&lt;/a&gt;) can be used to convert the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/deploy-windows-using-full-flash-update--ffu&quot;&gt;ffu&lt;/a&gt;&amp;nbsp;to an img file usable with &lt;a href=&quot;https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/dd.1.html&quot;&gt;dd&lt;/a&gt; found on OSX (and Linux, etc.).&lt;br /&gt;&lt;br /&gt;Ensure you're using &lt;a href=&quot;https://www.python.org/download/releases/2.7/&quot;&gt;Python 2.7&lt;/a&gt;&amp;nbsp;and convert the image:&lt;br /&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; python ffu2img.py PATH&lt;path&gt;/flash.ffu&lt;br /&gt;&lt;/path&gt;&lt;/code&gt;&lt;/pre&gt;Resulting in a &lt;b&gt;&lt;i&gt;flash.img&lt;/i&gt;&lt;/b&gt; file in the same location as the ffu.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Writing Image to SD Card&lt;/h3&gt;To write the image to an SD card I consulted the documentation at &lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/installing-images/mac.md&quot;&gt;raspberrypi.org&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I had trouble getting those instructions to work with my card/reader.&amp;nbsp; No matter what, dd failed with &quot;Operation not permitted&quot;.&amp;nbsp; In the end I had to:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Insert card into reader and connect reader to laptop&lt;/li&gt;&lt;li&gt;Without unmounting the SD card, run:&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; sudo diskutil partitionDisk /dev/disk2 1 MBR &quot;Free Space&quot; &quot;%noformat%&quot; 100%  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Disconnect then reconnect the reader (above command seemed to eject the SD card)&lt;/li&gt;&lt;li&gt;Write the image:&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; sudo dd bs=1m if=PATH/flash.img of=/dev/rdisk2 conv=sync&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;In my case, the SD card is&amp;nbsp;&lt;b&gt;&lt;i&gt;/dev/disk2&lt;/i&gt;&lt;/b&gt;.&amp;nbsp; /dev/disk2 and /dev/rdisk2 in the above commands should be adjusted appropriately for other cases.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Using df can see several partitions were created (/dev/disk2s1, disk2s2, disk2s3, and disk2s6) on the SD card.&amp;nbsp; Once inserted in the Raspberry Pi device and powered on, IoT Core should boot.&lt;br /&gt;&lt;div style=&quot;font-family: Calibri; font-size: 11.0pt; margin: 0in;&quot;&gt;&lt;br /&gt;&lt;h3&gt;IoT Core Setup&lt;/h3&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Calibri; font-size: 11.0pt; margin: 0in;&quot;&gt;As it happens, I didn't have a USB keyboard on hand to get the device on the wifi.&lt;br /&gt;&lt;br /&gt;Using an ethernet cable to connect the device directly to my laptop, I obtained the device's link-local address from the bottom-left of the touch screen.&amp;nbsp; The device's admin portal is now accessible by pointing my laptop browser at http://169.254.236.118:8080 (default username/password is Administrator/p@ssw0rd).&lt;br /&gt;&lt;br /&gt;In the left panel, selecting Connectivity, then Network, you can configure the wifi AP:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-Z5YabqARYIU/WkACj5I_WfI/AAAAAAAACyU/PnCl3lGOwvUpJUSc5ZjWhVJ2ON8m5_r-gCLcBGAs/s1600/Screen%2BShot%2B2017-12-24%2Bat%2B12.34.50.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1046&quot; data-original-width=&quot;1600&quot; height=&quot;209&quot; src=&quot;https://4.bp.blogspot.com/-Z5YabqARYIU/WkACj5I_WfI/AAAAAAAACyU/PnCl3lGOwvUpJUSc5ZjWhVJ2ON8m5_r-gCLcBGAs/s320/Screen%2BShot%2B2017-12-24%2Bat%2B12.34.50.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Initially the display was upside-down (assuming the HDMI port is &quot;up&quot; as when using &lt;a href=&quot;https://www.amazon.com/Raspberry-Pi-7-Inch-Touch-Screen/dp/B01GQFUWIC&quot;&gt;this touchscreen case&lt;/a&gt;).&amp;nbsp; To fix this, in the left panel pick&amp;nbsp;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;Device Settings and towards the bottom in Display Orientation select &quot;Landscape (Flipped)&quot;:&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-VqYoHAA5PeQ/WkACj9OvC8I/AAAAAAAACyY/-EVWnDAgqWYuJnjh05paGGcqVtRItHcsACEwYBhgL/s1600/Screen%2BShot%2B2017-12-24%2Bat%2B12.35.44.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1160&quot; data-original-width=&quot;1600&quot; height=&quot;231&quot; src=&quot;https://3.bp.blogspot.com/-VqYoHAA5PeQ/WkACj9OvC8I/AAAAAAAACyY/-EVWnDAgqWYuJnjh05paGGcqVtRItHcsACEwYBhgL/s320/Screen%2BShot%2B2017-12-24%2Bat%2B12.35.44.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style=&quot;font-size: 14.6667px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;</content><author><name>Contact:</name></author><category term="iot" /><category term="raspi" /><category term="iotcore" /><category term="win10" /><summary type="html">Following up on&amp;nbsp;my last post, finally got around to trying to install IoT Core on my actual Raspberry Pi device:Raspberry Pi 3 model B7&quot; TouchscreenMy development machine is a 15&quot; Macbook Pro running&amp;nbsp;OSX High Sierra (10.3.2).&amp;nbsp; Wasn't able to get a Windows 10 VM in VirtualBox to recognize the SD card slot in my adapter (the otherwise fantastic Satechi type-C multi-port adapater), so started looking for how to flash the image without using IoT Core Dashboard.Image PreparationMicrosoft has some docs about using dism&amp;nbsp;instead of Dashboard.&amp;nbsp; From the&amp;nbsp;IoT Core download page&amp;nbsp;you can obtain an iso file containing an msi that by default installs the image to: C:\Program Files (x86)\Microsoft IoT\FFU\RaspberryPi2\flash.ffu ffu2img (https://github.com/t0x0/random/wiki/ffu2img) can be used to convert the ffu&amp;nbsp;to an img file usable with dd found on OSX (and Linux, etc.).Ensure you're using Python 2.7&amp;nbsp;and convert the image: python ffu2img.py PATH/flash.ffuResulting in a flash.img file in the same location as the ffu.Writing Image to SD CardTo write the image to an SD card I consulted the documentation at raspberrypi.org.I had trouble getting those instructions to work with my card/reader.&amp;nbsp; No matter what, dd failed with &quot;Operation not permitted&quot;.&amp;nbsp; In the end I had to:Insert card into reader and connect reader to laptopWithout unmounting the SD card, run: sudo diskutil partitionDisk /dev/disk2 1 MBR &quot;Free Space&quot; &quot;%noformat%&quot; 100% Disconnect then reconnect the reader (above command seemed to eject the SD card)Write the image: sudo dd bs=1m if=PATH/flash.img of=/dev/rdisk2 conv=syncIn my case, the SD card is&amp;nbsp;/dev/disk2.&amp;nbsp; /dev/disk2 and /dev/rdisk2 in the above commands should be adjusted appropriately for other cases.Using df can see several partitions were created (/dev/disk2s1, disk2s2, disk2s3, and disk2s6) on the SD card.&amp;nbsp; Once inserted in the Raspberry Pi device and powered on, IoT Core should boot.IoT Core SetupAs it happens, I didn't have a USB keyboard on hand to get the device on the wifi.Using an ethernet cable to connect the device directly to my laptop, I obtained the device's link-local address from the bottom-left of the touch screen.&amp;nbsp; The device's admin portal is now accessible by pointing my laptop browser at http://169.254.236.118:8080 (default username/password is Administrator/p@ssw0rd).In the left panel, selecting Connectivity, then Network, you can configure the wifi AP:Initially the display was upside-down (assuming the HDMI port is &quot;up&quot; as when using this touchscreen case).&amp;nbsp; To fix this, in the left panel pick&amp;nbsp;Device Settings and towards the bottom in Display Orientation select &quot;Landscape (Flipped)&quot;:</summary></entry><entry><title type="html">Win10 IoT Core Redux</title><link href="http://localhost:4000/2017/11/23/win10-iot-core-redux.html" rel="alternate" type="text/html" title="Win10 IoT Core Redux" /><published>2017-11-23T17:22:00+08:00</published><updated>2017-11-23T17:22:00+08:00</updated><id>http://localhost:4000/2017/11/23/win10-iot-core-redux</id><content type="html" xml:base="http://localhost:4000/2017/11/23/win10-iot-core-redux.html">Moments after completing my &lt;a href=&quot;https://rendered-obsolete.blogspot.com/2017/11/win-10-iot-core.html&quot;&gt;last post&lt;/a&gt; I noticed IoT Core running in the VM reported it had no IP address.&amp;nbsp; I initially assumed I just had to fiddle with the network adapter settings, but after dong that for a while it appears I can't get networking to work under VirtualBox at all!&lt;br /&gt;&lt;br /&gt;Rather than give up, I decided to give &lt;a href=&quot;http://vmware.com/&quot;&gt;VMware&lt;/a&gt; a try.&lt;br /&gt;&lt;br /&gt;VMware doesn't seem to be able to work directly with the VHD image I'd created- instead expecting a VMDK.&amp;nbsp; I thought Hyper-V could be used to do the conversion, but it's only able to create a VHDX.&amp;nbsp; It looks like &lt;a href=&quot;http://www.vmware.com/products/converter.html&quot;&gt;VMware's vCenter Converter&lt;/a&gt; should be able to do it, but I couldn't get that working.&amp;nbsp; In the end &lt;a href=&quot;http://www.winimage.com/winimage.htm&quot;&gt;winimage&lt;/a&gt; got the job done.&lt;br /&gt;&lt;br /&gt;Clicking through the VM setup I was again up and running with a working IoT Core VM.&amp;nbsp; This time with networking.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-g0ZF5OHElQY/WhaSZPZPC7I/AAAAAAAACxs/MmtDNfV2LrwyozAH6Dc9FAhYVJrC8AftQCLcBGAs/s1600/iotcore.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;908&quot; data-original-width=&quot;1254&quot; height=&quot;231&quot; src=&quot;https://2.bp.blogspot.com/-g0ZF5OHElQY/WhaSZPZPC7I/AAAAAAAACxs/MmtDNfV2LrwyozAH6Dc9FAhYVJrC8AftQCLcBGAs/s320/iotcore.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;I've learned my lesson to not celebrate prematurely.&lt;br /&gt;&lt;br /&gt;Last step was installing &lt;a href=&quot;https://developer.microsoft.com/en-us/windows/iot/downloads&quot;&gt;IoT Core Dashboard&lt;/a&gt; and now I should be good to go:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-D8w-cV2tTfw/WhaTES0heHI/AAAAAAAACx0/RwAPA4p1W94tmpY5LLFB_kBeLAY6PNnKwCLcBGAs/s1600/iotdashboard.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;252&quot; data-original-width=&quot;1080&quot; height=&quot;74&quot; src=&quot;https://1.bp.blogspot.com/-D8w-cV2tTfw/WhaTES0heHI/AAAAAAAACx0/RwAPA4p1W94tmpY5LLFB_kBeLAY6PNnKwCLcBGAs/s320/iotdashboard.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;</content><author><name>Contact:</name></author><category term="virtualbox" /><category term="vmware" /><category term="raspi" /><category term="iotcore" /><category term="win10" /><summary type="html">Moments after completing my last post I noticed IoT Core running in the VM reported it had no IP address.&amp;nbsp; I initially assumed I just had to fiddle with the network adapter settings, but after dong that for a while it appears I can't get networking to work under VirtualBox at all!Rather than give up, I decided to give VMware a try.VMware doesn't seem to be able to work directly with the VHD image I'd created- instead expecting a VMDK.&amp;nbsp; I thought Hyper-V could be used to do the conversion, but it's only able to create a VHDX.&amp;nbsp; It looks like VMware's vCenter Converter should be able to do it, but I couldn't get that working.&amp;nbsp; In the end winimage got the job done.Clicking through the VM setup I was again up and running with a working IoT Core VM.&amp;nbsp; This time with networking.I've learned my lesson to not celebrate prematurely.Last step was installing IoT Core Dashboard and now I should be good to go:</summary></entry><entry><title type="html">Win 10 IoT Core</title><link href="http://localhost:4000/2017/11/18/win-10-iot-core.html" rel="alternate" type="text/html" title="Win 10 IoT Core" /><published>2017-11-18T22:02:00+08:00</published><updated>2017-11-18T22:02:00+08:00</updated><id>http://localhost:4000/2017/11/18/win-10-iot-core</id><content type="html" xml:base="http://localhost:4000/2017/11/18/win-10-iot-core.html">Recently been looking at using a &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi 3&lt;/a&gt; for a modestly work-related project.&lt;br /&gt;&lt;br /&gt;Since the rest of our platform is running on Windows 10 IoT Enterprise (aka Windows 10 Enterprise LTSB), I thought I'd give &lt;a href=&quot;https://developer.microsoft.com/en-us/windows/iot&quot;&gt;IoT Core&lt;/a&gt; a look in the hopes that almost no porting would be required.&amp;nbsp; The &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/iot-core/learn-about-hardware/hardwarecompatlist&quot;&gt;hardware compatibility list&lt;/a&gt;&amp;nbsp;deserves special mention here because there is far more RaspPi accessories available than are actually supported by Win10.&lt;br /&gt;&lt;br /&gt;For various reasons I'm not going to have hardware for over a month, so I'm trying to give things a whirl via&amp;nbsp;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;virtualbox&lt;/a&gt;.&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://www.newventuresoftware.com/blog/running-windows-10-iot-core-in-a-virtual-machine&quot;&gt;This blog post&lt;/a&gt; seems to be referenced numerous places as the reference to get an x86/x64 ISO of IoT Core running in a VM.&amp;nbsp; But, between using some tool from the XNA developer forums and glossing over several details I started looking for other sources.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://autosqa.com/blog/index.php/2016/04/14/how-to-run-windows-10-iot-core-in-vmware-workstation/&quot;&gt;This post&lt;/a&gt;&amp;nbsp;from a year and a half ago gave me another view as it goes over running IoT Core in VMWare.&amp;nbsp; It pointed me towards investigating VHD and &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/dism-image-management-command-line-options-s14&quot;&gt;dism&lt;/a&gt;.&amp;nbsp; A series of MS blogs also gave me a bit better understanding of their usage: &lt;a href=&quot;https://blogs.technet.microsoft.com/jamesone/2009/05/26/how-to-work-with-vhd-files-at-the-command-line/&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://blogs.technet.microsoft.com/jamesone/2009/05/26/how-to-customize-windows-images-with-dism/&quot;&gt;this&lt;/a&gt;, and &lt;a href=&quot;https://blogs.technet.microsoft.com/jamesone/2009/05/27/how-to-install-an-image-onto-a-vhd-file/&quot;&gt;this&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;What follows is what I did in the end to get things running.&lt;br /&gt;&lt;h2&gt;Installation&lt;/h2&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;Image Creation&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;Start by &lt;a href=&quot;https://developer.microsoft.com/en-us/windows/iot&quot;&gt;downloading IoT Core&lt;/a&gt;.&amp;nbsp; You want the ISO for MinnowBoard MAX or whatever else is x64.&amp;nbsp; Mount that and run the msi.&amp;nbsp; Some stuff is installed to &lt;i&gt;c:\Program Files (x86)\Microsoft IoT\&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Next, need to create a VHD image:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Launch Disk Management&lt;/li&gt;&lt;li&gt;Action -&amp;gt; Create VHD&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Enter a location for the file&lt;/li&gt;&lt;li&gt;Use 8 GB for &quot;Virtual hard disk size&quot;&lt;/li&gt;&lt;li&gt;I left everything else as default&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Note the name of the drive that was created (in my case it was &quot;Disk 1&quot;)&lt;/li&gt;&lt;/ol&gt;Now copy the IoT Core ffu image to the VHD:&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; C:\&amp;gt; dism /Apply-Image /Image-File:”C:\Program Files (x86)\Microsoft IoT\MinnowBoardMax_x64\flash.ffu” /ApplyDrive:\\.\PhysicalDrive1 /SkipPlatformCheck&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Where PhysicalDriveN is the &quot;Disk N&quot;- the VHD.&lt;br /&gt;&lt;br /&gt;Once it finishes writing, right-click the drive in Disk Management and select &quot;Detach VHD&quot;.&lt;br /&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h3&gt;VM Configuration&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In VirtualBox (I'm using 5.1.26), create a new VM:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Version &quot;Windows 10 (64-bit)&quot;&lt;/li&gt;&lt;li&gt;Memory size 2048&lt;/li&gt;&lt;li&gt;&quot;Use an existing virtual hard disk file&quot; and browse to the VHD&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;After the VM is created, right-click it and select &quot;Settings&quot;.&amp;nbsp; On the System tab check &quot;&lt;b&gt;Enable EFI (special OSes only)&lt;/b&gt;&quot;.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Start the VM and after brief startup you should be greeted with:&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-DUhAoALb9Ok/WhA6_dC4ZSI/AAAAAAAACxc/SGKWiX1ylLgCDQHqUQOxVA7dCLgR6BFnACLcBGAs/s1600/Screen%2BShot%2B2017-11-18%2Bat%2B18.24.16.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1300&quot; data-original-width=&quot;1600&quot; height=&quot;260&quot; src=&quot;https://4.bp.blogspot.com/-DUhAoALb9Ok/WhA6_dC4ZSI/AAAAAAAACxc/SGKWiX1ylLgCDQHqUQOxVA7dCLgR6BFnACLcBGAs/s320/Screen%2BShot%2B2017-11-18%2Bat%2B18.24.16.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Sweet, sweet victory!&lt;/div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Detours&lt;/h2&gt;&lt;div&gt;There were a few miss-steps along the way.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Despite every reference I found calling out the need to boot with EFI, I managed to overlook that by the time I finally got around to setting my VM up.&amp;nbsp; Should you do the same, on startup the VM will fail immediately:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; FATAL: No bootable medium found! System halted.  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class=&quot;p1&quot;&gt;After that, once I enabled EFI I was dropped into a UEFI shell:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-hsPIVXbSvIc/WhA0gzUAwZI/AAAAAAAACxM/kNBF6uZePJsv2P4ZkWoQLrw7zq9vSJZOQCLcBGAs/s1600/Screen%2BShot%2B2017-11-18%2Bat%2B21.23.12.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;858&quot; data-original-width=&quot;1328&quot; height=&quot;206&quot; src=&quot;https://4.bp.blogspot.com/-hsPIVXbSvIc/WhA0gzUAwZI/AAAAAAAACxM/kNBF6uZePJsv2P4ZkWoQLrw7zq9vSJZOQCLcBGAs/s320/Screen%2BShot%2B2017-11-18%2Bat%2B21.23.12.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Luckily, I stubbled upon the &lt;a href=&quot;https://developer.microsoft.com/en-us/windows/iot/Docs/GetStarted/mbm/sdcard/stable/getstartedstep2&quot;&gt;setup guide for the MinnowBoard MAX&lt;/a&gt;&amp;nbsp;which provided the necessary hint.&amp;nbsp; Guessing that the first device listed was the correct device I tried:&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; Shell&amp;gt; fs0:  &lt;br /&gt; fs0:&amp;gt; efi\boot\bootia32.efi  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Only, it wasn't there.&amp;nbsp; There was only an efi file for x64- it was trying to boot a 64-bit OS.&amp;nbsp; I'd followed the old blogs and picked &quot;Windows 10 (32-bit)&quot; when setting up the VM.&amp;nbsp; Nuking that VM and setting it up as &quot;Windows 10 (64-bit)&quot; like in the instructions above did the trick.&lt;br /&gt;&lt;br /&gt;Astute readers might have noticed my host OS is OSX.&amp;nbsp; The Windows 10 portions were also done within the confines of VirtualBox.&lt;/div&gt;</content><author><name>Contact:</name></author><category term="iot" /><category term="raspi" /><category term="iotcore" /><category term="win10" /><summary type="html">Recently been looking at using a Raspberry Pi 3 for a modestly work-related project.Since the rest of our platform is running on Windows 10 IoT Enterprise (aka Windows 10 Enterprise LTSB), I thought I'd give IoT Core a look in the hopes that almost no porting would be required.&amp;nbsp; The hardware compatibility list&amp;nbsp;deserves special mention here because there is far more RaspPi accessories available than are actually supported by Win10.For various reasons I'm not going to have hardware for over a month, so I'm trying to give things a whirl via&amp;nbsp;virtualbox.&amp;nbsp;&amp;nbsp;This blog post seems to be referenced numerous places as the reference to get an x86/x64 ISO of IoT Core running in a VM.&amp;nbsp; But, between using some tool from the XNA developer forums and glossing over several details I started looking for other sources.This post&amp;nbsp;from a year and a half ago gave me another view as it goes over running IoT Core in VMWare.&amp;nbsp; It pointed me towards investigating VHD and dism.&amp;nbsp; A series of MS blogs also gave me a bit better understanding of their usage: this, this, and this.What follows is what I did in the end to get things running.InstallationImage CreationStart by downloading IoT Core.&amp;nbsp; You want the ISO for MinnowBoard MAX or whatever else is x64.&amp;nbsp; Mount that and run the msi.&amp;nbsp; Some stuff is installed to c:\Program Files (x86)\Microsoft IoT\.Next, need to create a VHD image:Launch Disk ManagementAction -&amp;gt; Create VHDEnter a location for the fileUse 8 GB for &quot;Virtual hard disk size&quot;I left everything else as defaultNote the name of the drive that was created (in my case it was &quot;Disk 1&quot;)Now copy the IoT Core ffu image to the VHD: C:\&amp;gt; dism /Apply-Image /Image-File:”C:\Program Files (x86)\Microsoft IoT\MinnowBoardMax_x64\flash.ffu” /ApplyDrive:\\.\PhysicalDrive1 /SkipPlatformCheckWhere PhysicalDriveN is the &quot;Disk N&quot;- the VHD.Once it finishes writing, right-click the drive in Disk Management and select &quot;Detach VHD&quot;.VM ConfigurationIn VirtualBox (I'm using 5.1.26), create a new VM:Version &quot;Windows 10 (64-bit)&quot;Memory size 2048&quot;Use an existing virtual hard disk file&quot; and browse to the VHDAfter the VM is created, right-click it and select &quot;Settings&quot;.&amp;nbsp; On the System tab check &quot;Enable EFI (special OSes only)&quot;.Start the VM and after brief startup you should be greeted with:Sweet, sweet victory!DetoursThere were a few miss-steps along the way.Despite every reference I found calling out the need to boot with EFI, I managed to overlook that by the time I finally got around to setting my VM up.&amp;nbsp; Should you do the same, on startup the VM will fail immediately: FATAL: No bootable medium found! System halted. After that, once I enabled EFI I was dropped into a UEFI shell:Luckily, I stubbled upon the setup guide for the MinnowBoard MAX&amp;nbsp;which provided the necessary hint.&amp;nbsp; Guessing that the first device listed was the correct device I tried: Shell&amp;gt; fs0: fs0:&amp;gt; efi\boot\bootia32.efi Only, it wasn't there.&amp;nbsp; There was only an efi file for x64- it was trying to boot a 64-bit OS.&amp;nbsp; I'd followed the old blogs and picked &quot;Windows 10 (32-bit)&quot; when setting up the VM.&amp;nbsp; Nuking that VM and setting it up as &quot;Windows 10 (64-bit)&quot; like in the instructions above did the trick.Astute readers might have noticed my host OS is OSX.&amp;nbsp; The Windows 10 portions were also done within the confines of VirtualBox.</summary></entry><entry><title type="html">Return to Xamarin and So Long to PCL</title><link href="http://localhost:4000/2017/10/24/return-to-xamarin-and-so-long-to-pcl.html" rel="alternate" type="text/html" title="Return to Xamarin and So Long to PCL" /><published>2017-10-24T14:47:00+08:00</published><updated>2017-10-24T14:47:00+08:00</updated><id>http://localhost:4000/2017/10/24/return-to-xamarin-and-so-long-to-pcl</id><content type="html" xml:base="http://localhost:4000/2017/10/24/return-to-xamarin-and-so-long-to-pcl.html">Working on a new project and using C# for the majority of the PC client.  We need a mobile app as well, so Xamarin seemed like the logical choice to maximize code reuse.  &lt;br /&gt;&lt;br /&gt;When previously working with Xamarin I was introduced to &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library&quot;&gt;PCL&lt;/a&gt;.  But, I was forever running into problems with platforms I was targeting and the ones supported by packages on nuget.  &lt;br /&gt;&lt;br /&gt;Apparently well aware of its flaws Microsoft has since deprecated PCL in favor of &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/net-standard&quot;&gt;.Net Standard&lt;/a&gt;.  We've started targeting the bleeding edge .Net Standard 2.0 since it provides the widest API coverage and meets our platform requirements.  What follows is my experience getting a multi-platform (initially just Android and UWP) Xamarin.Forms app using .Net Standard 2.0 building and running with &lt;a href=&quot;https://www.visualstudio.com/downloads/&quot;&gt;Visual Studio 2017 Community&lt;/a&gt;.  &lt;br /&gt;&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2&gt;Creation&lt;/h2&gt;Using the VS 2017 new project wizard, there's currently no obvious way to create a Xamarin app that uses .Net Standard 2.0.  Under Other Languages, Visual C#, there's Cross Platform App (Xamarin).  Next, for UI Technology choose Xamarin.Forms and Code Sharing Strategy choose Portable Class Library (PCL).  From there the following two links got me started converting the PCL project to .Net Standard: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://xamarinhelp.com/visual-studio-2017-net-standard-xamarin/&quot;&gt;Xamarin VS 2017 .Net Standard&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://xamarinhelp.com/upgrade-pcl-net-standard-class-library/&quot;&gt;Xamarin Upgrade PCL to .Net Standard&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2&gt;Building&lt;/h2&gt;Building for the first time resulted in a bunch of errors similar to the following: &lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; obj\Debug\netstandard2.0\mobile_app.AssemblyInfo.cs(14,12,14,54): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute  &lt;br /&gt; obj\Debug\netstandard2.0\mobile_app.AssemblyInfo.cs(15,12,15,60): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute  &lt;br /&gt; obj\Debug\netstandard2.0\mobile_app.AssemblyInfo.cs(16,12,16,58): error CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;To fix this, I need to remove Properties/AssemblyInfo.cs from the project.  &lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; App.xaml.cs(6,7,6,14): error CS0246: The type or namespace name 'Xamarin' could not be found (are you missing a using directive or an assembly reference?)  &lt;br /&gt; MainPage.xaml.cs(6,7,6,14): error CS0246: The type or namespace name 'Xamarin' could not be found (are you missing a using directive or an assembly reference?)  &lt;br /&gt; App.xaml.cs(10,32,10,43): error CS0246: The type or namespace name 'Application' could not be found (are you missing a using directive or an assembly reference?)  &lt;br /&gt; MainPage.xaml.cs(10,37,10,48): error CS0246: The type or namespace name 'ContentPage' could not be found (are you missing a using directive or an assembly reference?)  &lt;br /&gt; App.xaml.cs(19,33,19,40): error CS0115: 'App.OnStart()': no suitable method found to override  &lt;br /&gt; App.xaml.cs(24,33,24,40): error CS0115: 'App.OnSleep()': no suitable method found to override  &lt;br /&gt; App.xaml.cs(29,33,29,41): error CS0115: 'App.OnResume()': no suitable method found to override  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;For this, right-click VS project, Manage NuGet Packages, and add Xamarin.Forms.  &lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; error : Project 'mobile_app\mobile_app\mobile_app\mobile_app.csproj' targets '.NETStandard,Version=v2.0'. It cannot be referenced by a project that targets 'UAP,Version=v10.0.10586'.  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;I couldn't just build a UWP application with .NetStandard 2.0, it &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/&quot;&gt;required upgrading Visual Studio 2017 to 15.4&lt;/a&gt; and setting the Minimum Version of the UWP project to &quot;Windows 10 Fall Creators Update&quot; (may first need to set Target Version to the same).  &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-KnsVNVAiYDI/We7cD-J3fuI/AAAAAAAACww/aOgJ78Qp18Mr7pJlUAVHwLl8Wos-LcikQCPcBGAYYCw/s1600/uwp_target.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;318&quot; data-original-width=&quot;661&quot; height=&quot;154&quot; src=&quot;https://3.bp.blogspot.com/-KnsVNVAiYDI/We7cD-J3fuI/AAAAAAAACww/aOgJ78Qp18Mr7pJlUAVHwLl8Wos-LcikQCPcBGAYYCw/s320/uwp_target.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.  &lt;br /&gt; 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'  &lt;br /&gt;   at System.ModuleHandle.ResolveType(RuntimeModule module, Int32 typeToken, IntPtr* typeInstArgs, Int32 typeInstCount, IntPtr* methodInstArgs, Int32 methodInstCount, ObjectHandleOnStack type)  &lt;br /&gt;   at System.ModuleHandle.ResolveTypeHandleInternal(RuntimeModule module, Int32 typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)  &lt;br /&gt;   at System.Reflection.RuntimeModule.ResolveType(Int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)  &lt;br /&gt;   at System.Reflection.CustomAttribute.FilterCustomAttributeRecord(CustomAttributeRecord caRecord, MetadataImport scope, Assembly&amp;amp; lastAptcaOkAssembly, RuntimeModule decoratedModule, MetadataToken decoratedToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, Object[] attributes, IList derivedAttributes, RuntimeType&amp;amp; attributeType, IRuntimeMethodInfo&amp;amp; ctor, Boolean&amp;amp; ctorHasParameters, Boolean&amp;amp; isVarArg)  &lt;br /&gt;   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType, Boolean mustBeInheritable, IList derivedAttributes, Boolean isDecoratedTargetSecurityTransparent)  &lt;br /&gt;   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeAssembly assembly, RuntimeType caType)  &lt;br /&gt;   at System.Reflection.RuntimeAssembly.GetCustomAttributes(Type attributeType, Boolean inherit)  &lt;br /&gt;   at System.Attribute.GetCustomAttributes(Assembly element, Type attributeType, Boolean inherit)  &lt;br /&gt;   at System.Attribute.GetCustomAttribute(Assembly element, Type attributeType, Boolean inherit)  &lt;br /&gt;   at System.Reflection.CustomAttributeExtensions.GetCustomAttribute[T](Assembly element)  &lt;br /&gt;   at Microsoft.Build.Tasks.ProcessResourceFiles.ReadAssemblyResources(String name, String outFileOrDir)  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Updating Microsoft.NETCore.UniversalWindowsPlatform package to the latest version on nuget solved this.  There's also a warning about incompatible versions of Xamarin.Forms, but for that I just removed the reference to the old assembly from the UWP project.  &lt;br /&gt;&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2&gt;Running&lt;/h2&gt;&lt;pre style=&quot;background: #f0f0f0; border: 1px dashed #cccccc; color: black; font-family: &amp;quot;arial&amp;quot;; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; DEP3321: To deploy this application, your deployment target should be running Windows Universal Runtime version 10.0.16299.0 or higher. You currently are running version 10.0.15063.674. Please update your OS, or change your deployment target to a device with the appropriate version.  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Here we're targeting Fall Creators Update but I wasn't running it yet.  Previously I would have to enroll in &lt;a href=&quot;https://insider.windows.com/en-us/how-to-pc/&quot;&gt;Windows 10 Insider Preview&lt;/a&gt;, but as of today Fall Creators Update is officially released.  Finally, I'm not sure if this is actually required for UWP apps, but it's needed for Android so I'll mention it here anyway.  Xaml files need to be available at runtime, so right-click each and in Properties set &quot;Build Action&quot; to &quot;Embedded resource&quot;.  &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><author><name>Contact:</name></author><category term="c#" /><category term="xamarin" /><category term="netstandard" /><category term="uwp" /><category term="vs2017" /><category term="win10" /><summary type="html">Working on a new project and using C# for the majority of the PC client. We need a mobile app as well, so Xamarin seemed like the logical choice to maximize code reuse. When previously working with Xamarin I was introduced to PCL. But, I was forever running into problems with platforms I was targeting and the ones supported by packages on nuget. Apparently well aware of its flaws Microsoft has since deprecated PCL in favor of .Net Standard. We've started targeting the bleeding edge .Net Standard 2.0 since it provides the widest API coverage and meets our platform requirements. What follows is my experience getting a multi-platform (initially just Android and UWP) Xamarin.Forms app using .Net Standard 2.0 building and running with Visual Studio 2017 Community. CreationUsing the VS 2017 new project wizard, there's currently no obvious way to create a Xamarin app that uses .Net Standard 2.0. Under Other Languages, Visual C#, there's Cross Platform App (Xamarin). Next, for UI Technology choose Xamarin.Forms and Code Sharing Strategy choose Portable Class Library (PCL). From there the following two links got me started converting the PCL project to .Net Standard: Xamarin VS 2017 .Net StandardXamarin Upgrade PCL to .Net StandardBuildingBuilding for the first time resulted in a bunch of errors similar to the following: obj\Debug\netstandard2.0\mobile_app.AssemblyInfo.cs(14,12,14,54): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute obj\Debug\netstandard2.0\mobile_app.AssemblyInfo.cs(15,12,15,60): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute obj\Debug\netstandard2.0\mobile_app.AssemblyInfo.cs(16,12,16,58): error CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute To fix this, I need to remove Properties/AssemblyInfo.cs from the project. App.xaml.cs(6,7,6,14): error CS0246: The type or namespace name 'Xamarin' could not be found (are you missing a using directive or an assembly reference?) MainPage.xaml.cs(6,7,6,14): error CS0246: The type or namespace name 'Xamarin' could not be found (are you missing a using directive or an assembly reference?) App.xaml.cs(10,32,10,43): error CS0246: The type or namespace name 'Application' could not be found (are you missing a using directive or an assembly reference?) MainPage.xaml.cs(10,37,10,48): error CS0246: The type or namespace name 'ContentPage' could not be found (are you missing a using directive or an assembly reference?) App.xaml.cs(19,33,19,40): error CS0115: 'App.OnStart()': no suitable method found to override App.xaml.cs(24,33,24,40): error CS0115: 'App.OnSleep()': no suitable method found to override App.xaml.cs(29,33,29,41): error CS0115: 'App.OnResume()': no suitable method found to override For this, right-click VS project, Manage NuGet Packages, and add Xamarin.Forms. error : Project 'mobile_app\mobile_app\mobile_app\mobile_app.csproj' targets '.NETStandard,Version=v2.0'. It cannot be referenced by a project that targets 'UAP,Version=v10.0.10586'. I couldn't just build a UWP application with .NetStandard 2.0, it required upgrading Visual Studio 2017 to 15.4 and setting the Minimum Version of the UWP project to &quot;Windows 10 Fall Creators Update&quot; (may first need to set Target Version to the same). Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified. 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' at System.ModuleHandle.ResolveType(RuntimeModule module, Int32 typeToken, IntPtr* typeInstArgs, Int32 typeInstCount, IntPtr* methodInstArgs, Int32 methodInstCount, ObjectHandleOnStack type) at System.ModuleHandle.ResolveTypeHandleInternal(RuntimeModule module, Int32 typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext) at System.Reflection.RuntimeModule.ResolveType(Int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments) at System.Reflection.CustomAttribute.FilterCustomAttributeRecord(CustomAttributeRecord caRecord, MetadataImport scope, Assembly&amp;amp; lastAptcaOkAssembly, RuntimeModule decoratedModule, MetadataToken decoratedToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, Object[] attributes, IList derivedAttributes, RuntimeType&amp;amp; attributeType, IRuntimeMethodInfo&amp;amp; ctor, Boolean&amp;amp; ctorHasParameters, Boolean&amp;amp; isVarArg) at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType, Boolean mustBeInheritable, IList derivedAttributes, Boolean isDecoratedTargetSecurityTransparent) at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeAssembly assembly, RuntimeType caType) at System.Reflection.RuntimeAssembly.GetCustomAttributes(Type attributeType, Boolean inherit) at System.Attribute.GetCustomAttributes(Assembly element, Type attributeType, Boolean inherit) at System.Attribute.GetCustomAttribute(Assembly element, Type attributeType, Boolean inherit) at System.Reflection.CustomAttributeExtensions.GetCustomAttribute[T](Assembly element) at Microsoft.Build.Tasks.ProcessResourceFiles.ReadAssemblyResources(String name, String outFileOrDir) Updating Microsoft.NETCore.UniversalWindowsPlatform package to the latest version on nuget solved this. There's also a warning about incompatible versions of Xamarin.Forms, but for that I just removed the reference to the old assembly from the UWP project. Running DEP3321: To deploy this application, your deployment target should be running Windows Universal Runtime version 10.0.16299.0 or higher. You currently are running version 10.0.15063.674. Please update your OS, or change your deployment target to a device with the appropriate version. Here we're targeting Fall Creators Update but I wasn't running it yet. Previously I would have to enroll in Windows 10 Insider Preview, but as of today Fall Creators Update is officially released. Finally, I'm not sure if this is actually required for UWP apps, but it's needed for Android so I'll mention it here anyway. Xaml files need to be available at runtime, so right-click each and in Properties set &quot;Build Action&quot; to &quot;Embedded resource&quot;.</summary></entry><entry><title type="html">Migrating Orleans backend from Windows to Linux, AWS, and beyond</title><link href="http://localhost:4000/2017/10/19/migrating-orleans-backend-from-windows.html" rel="alternate" type="text/html" title="Migrating Orleans backend from Windows to Linux, AWS, and beyond" /><published>2017-10-19T10:16:00+08:00</published><updated>2017-10-19T10:16:00+08:00</updated><id>http://localhost:4000/2017/10/19/migrating-orleans-backend-from-windows</id><content type="html" xml:base="http://localhost:4000/2017/10/19/migrating-orleans-backend-from-windows.html">&lt;b&gt;This is a draft of a post I composed in March, 2016.  Only partially completed, but maybe it will be of some value to someone.&lt;/b&gt; &lt;p/&gt; Our backend has been based on Microsoft Orleans (&lt;a href=&quot;http://research.microsoft.com/en-us/projects/orleans/&quot;&gt;MS Research&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/orleans&quot;&gt;GitHub&lt;/a&gt;) for some time.  We're primarily running the entire backend- deployment and all- on Windows 7 mostly because: &lt;ol&gt;&lt;li&gt;It's convenient since all developers are running Windows on their desktops&lt;/li&gt;&lt;li&gt;It's easier for QA to test and operate playtests until everything is fully automated and we've got devops tools in place&lt;/li&gt;&lt;li&gt;Our company is mostly a &quot;Windows shop&quot; anyway&lt;/li&gt;&lt;/ol&gt; It's been a long time coming, but we've finally gotten around to looking at running the backend on Linux.  A few components, namely &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Zookeeper&lt;/a&gt; and &lt;a href=&quot;https://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; are fairly straight-forward since they're arguably &lt;em&gt;intended&lt;/em&gt; to run on Linux.  That leaves Orleans itself and, of course, our own game server.  &lt;p/&gt; Orleans should &quot;in theory&quot; work fine on top of Mono.  However, our Orleans projects are a bit of a mess, so I thought I'd just try running the binaries produced by Visual Studio.  And &lt;a href=&quot;https://en.wikipedia.org/wiki/Write_once,_run_anywhere&quot;&gt;shockingly (see &quot;...debug everywhere&quot;)&lt;/a&gt;, it mostly worked; we only ran into the following problems: &lt;ul&gt;&lt;li&gt;We use &lt;a href=&quot;https://logging.apache.org/log4net/&quot;&gt;log4net&lt;/a&gt; and our App.config was specifying ColoredConsoleAppender which didn't work on Mono (switched to ConsoleAppender)&lt;/li&gt;&lt;li&gt;We spawn our game servers using Process.StartInfo.UseShellExecute = true and caused an error &quot;xdg-open: unexpected option ...&quot; (we set UseShellExecute to false on Linux- Windows seems to require it)&lt;/li&gt;&lt;li&gt;Our config file had a Windows &quot;smell&quot;&lt;/li&gt;&lt;li&gt;It refused to startup with the version of mono that ships with Ubuntu 14.04, but &lt;a href=&quot;http://www.mono-project.com/docs/getting-started/install/linux/#debian-ubuntu-and-derivatives&quot;&gt;installing the latest, stable version&lt;/a&gt; fixed that&lt;/li&gt;&lt;/ul&gt; Next came getting our game server to compile and run on Linux.  Luckily, our &lt;a href=&quot;https://github.com/waf-project/waf&quot;&gt;WAF&lt;/a&gt;-based build system should &quot;just work&quot; on Linux (in theory).  Most of the compilation and runtime problems fell into just a few categories: &lt;ul&gt;&lt;li&gt;Hard-coded windows specific paths and commands&lt;/li&gt;&lt;li&gt;Paths that were incorrect with a case-sensitive filesystem&lt;/li&gt;&lt;li&gt;Asserts that were triggered by incomplete implementations&lt;/li&gt;&lt;/ul&gt; &lt;p/&gt; &lt;b&gt;&lt;i&gt;N.B.&lt;/i&gt;: At the time of writing we were using &lt;a href=&quot;https://www.cryengine.com/&quot;&gt;CryEngine 5.0&lt;/a&gt;.  Since then the WAF buildchain has been retired in favor of &lt;a href=&quot;https://cmake.org/&quot;&gt;cmake&lt;/a&gt;&lt;/b&gt; &lt;p/&gt; Our initial round of deployment scripts where based on PowerShell 3.o and left a lot to be desired.  PowerShell 3 (as opposed to 1 or 2) was chosen because it provided &lt;a href=&quot;https://technet.microsoft.com/en-us/library/jj149006.aspx&quot;&gt;disconnected sessions&lt;/a&gt; allowing us to execute things on a remote machine and leave them running in the background without leaving a shell connected (or installing as a service).  But, PowerShell 3 isn't installed by default on Windows 7 and then &lt;a href=&quot;https://technet.microsoft.com/en-us/library/hh849694.aspx&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;https://technet.microsoft.com/en-us/library/hh849812.aspx&quot;&gt;other&lt;/a&gt; stuff is needed on remote machines to get remote commands working at all.  Generally speaking, it was the overall idiosyncratic behaviour (Invoke-Command takes PSCredentials but old commands like &quot;net use&quot; don't- and there's apparently no modern replacement), and unfamiliar syntax (passing ArgumentList to Invoke-Command's ScriptBlock) that made the PowerShell prototype take longer than I expected.  And there's still a few things that just don't work.  Granted, I'm a completely new to PowerShell, and like all advanced tools there's a nontrivial learning curve.  PowerShell is without a doubt leaps and bounds better than cmd.exe, and some aspects like getting auto-complete for commands and arguments in the ISE were welcome.  &lt;p/&gt; In a completely unfair comparison (given that I have non-trivial Linux experience), we were able to fully automate deployment to Ubuntu in under a day.  The frustration of Invoke-Command/Credential/InDisconnectedSession was replaced with the relatively straightforward use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;ssh&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Nohup&quot;&gt;nohup&lt;/a&gt;.  And, once you get password-less &lt;a href=&quot;http://www.linuxproblem.org/art_9.html&quot;&gt;ssh&lt;/a&gt; and &lt;a href=&quot;http://askubuntu.com/questions/192050/how-to-run-sudo-command-with-no-password&quot;&gt;sudo&lt;/a&gt; setup, and embrace other commands like &lt;a href=&quot;https://www.mattcutts.com/blog/a-quick-tutorial-on-screen/&quot;&gt;screen&lt;/a&gt;, working with multiple remote machines is a breeze.  &lt;p/&gt; All-in-all we were up and running on Ubuntu 14.04, rocking nightly builds in &lt;a href=&quot;https://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt;, deploying to &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt;, and doing playtests within a week. *opens a beer*</content><author><name>Contact:</name></author><category term="mono" /><category term="2016" /><category term="linux" /><category term="backend" /><category term="orleans" /><summary type="html">This is a draft of a post I composed in March, 2016. Only partially completed, but maybe it will be of some value to someone. Our backend has been based on Microsoft Orleans (MS Research, GitHub) for some time. We're primarily running the entire backend- deployment and all- on Windows 7 mostly because: It's convenient since all developers are running Windows on their desktopsIt's easier for QA to test and operate playtests until everything is fully automated and we've got devops tools in placeOur company is mostly a &quot;Windows shop&quot; anyway It's been a long time coming, but we've finally gotten around to looking at running the backend on Linux. A few components, namely Zookeeper and MongoDB are fairly straight-forward since they're arguably intended to run on Linux. That leaves Orleans itself and, of course, our own game server. Orleans should &quot;in theory&quot; work fine on top of Mono. However, our Orleans projects are a bit of a mess, so I thought I'd just try running the binaries produced by Visual Studio. And shockingly (see &quot;...debug everywhere&quot;), it mostly worked; we only ran into the following problems: We use log4net and our App.config was specifying ColoredConsoleAppender which didn't work on Mono (switched to ConsoleAppender)We spawn our game servers using Process.StartInfo.UseShellExecute = true and caused an error &quot;xdg-open: unexpected option ...&quot; (we set UseShellExecute to false on Linux- Windows seems to require it)Our config file had a Windows &quot;smell&quot;It refused to startup with the version of mono that ships with Ubuntu 14.04, but installing the latest, stable version fixed that Next came getting our game server to compile and run on Linux. Luckily, our WAF-based build system should &quot;just work&quot; on Linux (in theory). Most of the compilation and runtime problems fell into just a few categories: Hard-coded windows specific paths and commandsPaths that were incorrect with a case-sensitive filesystemAsserts that were triggered by incomplete implementations N.B.: At the time of writing we were using CryEngine 5.0. Since then the WAF buildchain has been retired in favor of cmake Our initial round of deployment scripts where based on PowerShell 3.o and left a lot to be desired. PowerShell 3 (as opposed to 1 or 2) was chosen because it provided disconnected sessions allowing us to execute things on a remote machine and leave them running in the background without leaving a shell connected (or installing as a service). But, PowerShell 3 isn't installed by default on Windows 7 and then some other stuff is needed on remote machines to get remote commands working at all. Generally speaking, it was the overall idiosyncratic behaviour (Invoke-Command takes PSCredentials but old commands like &quot;net use&quot; don't- and there's apparently no modern replacement), and unfamiliar syntax (passing ArgumentList to Invoke-Command's ScriptBlock) that made the PowerShell prototype take longer than I expected. And there's still a few things that just don't work. Granted, I'm a completely new to PowerShell, and like all advanced tools there's a nontrivial learning curve. PowerShell is without a doubt leaps and bounds better than cmd.exe, and some aspects like getting auto-complete for commands and arguments in the ISE were welcome. In a completely unfair comparison (given that I have non-trivial Linux experience), we were able to fully automate deployment to Ubuntu in under a day. The frustration of Invoke-Command/Credential/InDisconnectedSession was replaced with the relatively straightforward use of ssh and nohup. And, once you get password-less ssh and sudo setup, and embrace other commands like screen, working with multiple remote machines is a breeze. All-in-all we were up and running on Ubuntu 14.04, rocking nightly builds in Jenkins, deploying to AWS, and doing playtests within a week. *opens a beer*</summary></entry><entry><title type="html">rustlang dynamic library part 2</title><link href="http://localhost:4000/2016/04/05/rustlang-dynamic-library-part-2.html" rel="alternate" type="text/html" title="rustlang dynamic library part 2" /><published>2016-04-05T20:14:00+08:00</published><updated>2016-04-05T20:14:00+08:00</updated><id>http://localhost:4000/2016/04/05/rustlang-dynamic-library-part-2</id><content type="html" xml:base="http://localhost:4000/2016/04/05/rustlang-dynamic-library-part-2.html">A previous post was about getting a simple rust dynamic library working.  The next thing I wanted to do was try passing a more complex type from the dynamic library to the executable using it.  &lt;p/&gt; First, I changed dynamiclib to: &lt;pre&gt;&lt;br /&gt;#[derive(Debug)]&lt;br /&gt;pub struct Tuple (u32,);&lt;br /&gt;&lt;br /&gt;#[derive(Debug)]&lt;br /&gt;pub struct MyStruct {&lt;br /&gt;    s1: &amp;'static str,&lt;br /&gt;    s2: String,&lt;br /&gt;    t: Tuple,&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;#[no_mangle]&lt;br /&gt;pub extern &quot;C&quot; fn test() -&gt; MyStruct {&lt;br /&gt;    MyStruct {&lt;br /&gt;        s1: &quot;hello&quot;,&lt;br /&gt;        s2: &quot;world&quot;.to_string(),&lt;br /&gt;        t: Tuple(47),&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt; And dynamic to: &lt;pre&gt;&lt;br /&gt;#[link(name=&quot;dynamiclib&quot;)]&lt;br /&gt;extern {&lt;br /&gt;    fn test() -&gt; MyStruct;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;fn main() {&lt;br /&gt;    let retval = unsafe { test() };&lt;br /&gt;    println!(&quot;Got: {:?}&quot;, retval);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt; And (somewhat surprisingly) it worked as expected.  Although you get the following error: &lt;pre&gt;&lt;br /&gt;warning: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type, #[warn(improper_ctypes)] on by default&lt;br /&gt;&lt;/pre&gt; At first I considered appeasing the warning, but if it's a library written in rust and called from rust, shouldn't the default &lt;pre&gt;repr(Rust)&lt;/pre&gt; be safe/correct?  &lt;p/&gt; Next, I decided to try loading and re-loading the shared library using this more complex struct... and I started getting SIGSEGV the second time I attempted to use the library.  &lt;p/&gt; I came across &lt;a href=&quot;https://github.com/nagisa/rust_libloading&quot;&gt;libloading&lt;/a&gt; (&lt;a href=&quot;https://crates.io/crates/libloading&quot;&gt;crates.io&lt;/a&gt;) which purports to be safer wrapper for working with dyanmic libraries, and if nothing else has much better &lt;a href=&quot;http://nagisa.github.io/rust_libloading/libloading/struct.Library.html&quot;&gt;documentation&lt;/a&gt;.  &lt;p/&gt; A quick change to dynamic/src/main.rs (devoid of error-checking): &lt;pre&gt;&lt;br /&gt;    let lib = Library::new(&quot;libdynamiclib.dylib&quot;).unwrap();&lt;br /&gt;    let test: Symbol&lt;extern fn() -&gt; MyStruct&gt; = unsafe {&lt;br /&gt;        lib.get(b&quot;test\0&quot;).unwrap()&lt;br /&gt;    };&lt;br /&gt;    println!(&quot;Got: {:?}&quot;, test());&lt;br /&gt;&lt;/pre&gt; And it works correctly even when re-loading the library.  So, I was either using stale symbols, or something else.  Still several things that I obviously don't fully understand.  Hopefully pouring over &lt;a href=&quot;https://doc.rust-lang.org/nomicon/README.html&quot;&gt;Rustonomicon&lt;/a&gt; will reveal the secrets to me.</content><author><name>Contact:</name></author><category term="rustlang" /><category term="ffi" /><summary type="html">A previous post was about getting a simple rust dynamic library working. The next thing I wanted to do was try passing a more complex type from the dynamic library to the executable using it. First, I changed dynamiclib to: #[derive(Debug)]pub struct Tuple (u32,);#[derive(Debug)]pub struct MyStruct { s1: &amp;'static str, s2: String, t: Tuple,}#[no_mangle]pub extern &quot;C&quot; fn test() -&gt; MyStruct { MyStruct { s1: &quot;hello&quot;, s2: &quot;world&quot;.to_string(), t: Tuple(47), }} And dynamic to: #[link(name=&quot;dynamiclib&quot;)]extern { fn test() -&gt; MyStruct;}fn main() { let retval = unsafe { test() }; println!(&quot;Got: {:?}&quot;, retval);} And (somewhat surprisingly) it worked as expected. Although you get the following error: warning: found struct without foreign-function-safe representation annotation in foreign module, consider adding a #[repr(C)] attribute to the type, #[warn(improper_ctypes)] on by default At first I considered appeasing the warning, but if it's a library written in rust and called from rust, shouldn't the default repr(Rust) be safe/correct? Next, I decided to try loading and re-loading the shared library using this more complex struct... and I started getting SIGSEGV the second time I attempted to use the library. I came across libloading (crates.io) which purports to be safer wrapper for working with dyanmic libraries, and if nothing else has much better documentation. A quick change to dynamic/src/main.rs (devoid of error-checking): let lib = Library::new(&quot;libdynamiclib.dylib&quot;).unwrap(); let test: Symbol MyStruct&gt; = unsafe { lib.get(b&quot;test\0&quot;).unwrap() }; println!(&quot;Got: {:?}&quot;, test()); And it works correctly even when re-loading the library. So, I was either using stale symbols, or something else. Still several things that I obviously don't fully understand. Hopefully pouring over Rustonomicon will reveal the secrets to me.</summary></entry><entry><title type="html">Xamarin Forms part 1</title><link href="http://localhost:4000/2016/04/05/xamarin-forms-part-1.html" rel="alternate" type="text/html" title="Xamarin Forms part 1" /><published>2016-04-05T18:20:00+08:00</published><updated>2016-04-05T18:20:00+08:00</updated><id>http://localhost:4000/2016/04/05/xamarin-forms-part-1</id><content type="html" xml:base="http://localhost:4000/2016/04/05/xamarin-forms-part-1.html">This is the first part of my Xamarin Forms dive.  &lt;h2&gt;Binding&lt;/h2&gt; Arguably the single most important thing to master as it connects your View (UI) to the ViewModel, it's only fitting I start out with Binding (&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/getting-started/introduction-to-xamarin-forms/#Data_Binding&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://blog.xamarin.com/introduction-to-data-binding/&quot;&gt;2&lt;/a&gt;  and &lt;a href=&quot;https://blog.xamarin.com/advanced-data-binding-for-ios-android-and-windows/&quot;&gt;3&lt;/a&gt;).  Since I’ve been using Forms I’ve found that binding is key to getting things working but various nuances are scattered about in numerous demos.  &lt;p/&gt; Bindings connect a &quot;source&quot; (either another UI element in the View or something in the ViewModel) to a &quot;target&quot; (some UI element in the View) that displays it.  &lt;p/&gt; To start with, you'll see that most projects create an XML namespace that refers to a .Net assembly generated by your project:  &lt;pre&gt;&lt;br /&gt;&amp;lt;!-- &quot;xmlns:local&quot; ties &quot;local&quot; XML namespace to the &quot;luck&quot; C# namespace in the &quot;luck&quot; assembly --&amp;gt;&lt;br /&gt;&amp;lt;ContentPage&lt;br /&gt;    xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;br /&gt;    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;br /&gt;    xmlns:local=&quot;clr-namespace:luck;assembly=luck&quot;&lt;br /&gt;    x:Class=&quot;luck.MainPage&quot;&lt;br /&gt;    &amp;gt;&lt;br /&gt;&amp;lt;/ContentPage&amp;gt;&lt;br /&gt;&lt;br /&gt;// &quot;local:MainViewModel&quot; in XAML thus refers to a C# class similar to:&lt;br /&gt;namespace luck {&lt;br /&gt;    public class MainViewModel {&lt;br /&gt;        // Implementation&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt; You can then easily create static bindings, references, and resources:  &lt;pre&gt;&lt;br /&gt;&amp;lt;!-- Static --&amp;gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{x:Static local:MainViewModel.Text}&quot; /&amp;gt;&lt;br /&gt;&lt;br /&gt;// C# ViewModel&lt;br /&gt;public class MainViewModel {&lt;br /&gt;    public static string Text = &quot;text&quot;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&amp;lt;!-- Reference --&amp;gt;&lt;br /&gt;&amp;lt;Label Text=&quot;text&quot; x:Name=&quot;MyText&quot; /&amp;gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{x:Reference MyText}&quot; /&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;!-- Resource --&amp;gt;&lt;br /&gt;    &amp;lt;ContentPage.Resources&amp;gt;&lt;br /&gt;        &amp;lt;ResourceDictionary&amp;gt;&lt;br /&gt;            &amp;lt;local:LocalizationConverter&lt;br /&gt;                x:Key=&quot;LocalizationConverter&quot; /&amp;gt;&lt;br /&gt;        &amp;lt;/ResourceDictionary&amp;gt;&lt;br /&gt;    &amp;lt;/ContentPage.Resources&amp;gt;&lt;br /&gt;    &amp;lt;Label Text=&quot;{Binding SelectedItem.DisplayName,&lt;br /&gt;        Converter={StaticResource LocalizationConverter}}&quot; /&amp;gt;&lt;br /&gt;&lt;/pre&gt; There's additional information about Resources and markup extensions &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/xaml-basics/xaml_markup_extensions/&quot;&gt;here&lt;/a&gt;, and I'll come back to ResourceDictionary a bit later in this series when I get to Styles.  &lt;p/&gt; Alternatively, the Binding markup extension is the most common binding technique and more advanced as it supports several different properties.  The easiest way of specifying a source is by setting the BindingContext for the entire Page since it is inherited by all children.  This can be done either in your code-behind constructor:  &lt;pre&gt;&lt;br /&gt;public MainPage ()&lt;br /&gt;{&lt;br /&gt;     InitializeComponent ();&lt;br /&gt;     BindingContext = new MainViewModel (); &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt; or via XAML:  &lt;pre&gt;&lt;br /&gt;    &amp;lt;ContentPage.BindingContext&amp;gt;&lt;br /&gt;        &amp;lt;local:MainViewModel /&amp;gt;&lt;br /&gt;    &amp;lt;/ContentPage.BindingContext&amp;gt;&lt;br /&gt;&lt;/pre&gt; You can then bind a simple value:  &lt;pre&gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{Binding Text}&quot; /&amp;gt;&lt;br /&gt;&lt;br /&gt;public class MainViewModel {&lt;br /&gt;    public string Text { get; set; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt; As already mentioned, Binding supports several different properties.  &lt;em&gt;Path&lt;/em&gt; specifies the property of the source to which we are binding and can be omitted if it's the first property.  The following two are equivalent: &lt;pre&gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{Binding Text}&quot; /&amp;gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{Binding Path=Text}&quot; /&amp;gt;&lt;br /&gt;&lt;/pre&gt; The Path property is able to access sub-properties as well as the index operator.  For example: &lt;pre&gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{Binding Values.Count}&quot; /&amp;gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{Binding Values[key]}&quot; /&amp;gt;&lt;br /&gt;&lt;br /&gt;// In the ViewModel&lt;br /&gt;public Dictionary&lt;string, string&gt; Values { get; set; }&lt;br /&gt;&lt;/pre&gt; According to &lt;a href=&quot;http://forums.xamarin.com/discussion/19361/data-binding-to-dictionary-object&quot;&gt;this&lt;/a&gt;, if you have large numbers of values to set you can simplify multiple indexed bindings by setting the binding context: &lt;pre&gt;&lt;br /&gt;&amp;lt;StackLayout BindingContext=&quot;{Binding Values}&quot; /&amp;gt;&lt;br /&gt;    &amp;lt;Label Text=&quot;{Binding [key]}&quot; /&amp;gt;&lt;br /&gt;&amp;lt;StackLayout /&amp;gt;&lt;br /&gt;&lt;/pre&gt; There is also a shorthand syntax to bind directly to the BindingContext itself: &lt;pre&gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{Binding .}&quot; /&amp;gt;&lt;br /&gt;&lt;/pre&gt; The &lt;em&gt;Source&lt;/em&gt; property allows the binding to explicitly specify the &quot;source&quot; of a binding.  It's analogous to the BindingContext (where the target specifies the source) and the following are equivalent:  &lt;pre&gt;&lt;br /&gt;&amp;lt;Label BindingContext=&quot;{x:Reference items}&quot; Text=&quot;{Binding SelectedItem, StringFormat='{0}'}&quot; /&amp;gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{Binding SelectedItem, Source={x:Reference items}, StringFormat='{0}'}&quot; /&amp;gt;&lt;br /&gt;&lt;/pre&gt; The biggest difference being using BindingContext will be inherited by all sub-children of the UI element.  At one point I found myself repeatedly specifying BindingContext and Source for a number of nested elements and then running into problems where I could no longer reference the original BindingContext, etc.  In this case I had to carefully consider what I was binding where and reorganise the data provided by my ViewModel to cut back on the excessive use of Source.  &lt;p/&gt; &lt;em&gt;StringFormat&lt;/em&gt; can be used to apply string conversion and formatting: &lt;pre&gt;&lt;br /&gt;&amp;lt;Label Text=&quot;{Binding Value, StringFormat='Formatted {0}'}&quot; /&amp;gt;&lt;br /&gt;&lt;/pre&gt; Internally it uses &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.string.format(v=vs.110).aspx&quot;&gt;String.Format&lt;/a&gt; method so it accepts all the same forms.  Note that because both .Net formatting and markup extensions use curly braces, StringFormat must be enclosed in single quotes.  &lt;p/&gt; The &lt;em&gt;Converter&lt;/em&gt; property is more generalised than StringFormat and also accepts an optional &lt;em&gt;ConverterParameter&lt;/em&gt; value: &lt;pre&gt;&lt;br /&gt; &amp;lt;Label Text=&quot;{Binding SomeInt, Converter={StaticResource IntConverter}, ConverterParameter=10}&quot; /&amp;gt;&lt;br /&gt;&lt;br /&gt; public class IntConverter : IValueConverter&lt;br /&gt; {&lt;br /&gt;  public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)&lt;br /&gt;  {&lt;br /&gt;   int intparam;&lt;br /&gt;   if (!int.TryParse(parameter as string, out intparam))&lt;br /&gt;    intparam = 1;&lt;br /&gt;&lt;br /&gt;   return (int)value * intparam;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)&lt;br /&gt;  {&lt;br /&gt;   int intparam;&lt;br /&gt;   if (!int.TryParse(parameter as string, out intparam))&lt;br /&gt;    intparam = 1;&lt;br /&gt;&lt;br /&gt;   return ((int)value) / intparam;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt; &lt;em&gt;Mode&lt;/em&gt; The final property &lt;em&gt;Mode&lt;/em&gt; is available to solve some specific binding problems.  I've not done anything with it just yet, so I'll refer to two relevant documents from Xamarin (&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/xaml-basics/data_binding_basics/&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/xaml-basics/data_bindings_to_mvvm/&quot;&gt;2&lt;/a&gt;) and revisit it later when I understand it better.  &lt;h2&gt;Dynamic Bindings&lt;/h2&gt; For values that can be changed at runtime, either the property you're binding to or the entire ViewModel needs to implement INotifyPropertyChanged interface.  For example, using System.Collections.ObjectModel.ObservableCollection: &lt;pre&gt;&lt;br /&gt;public static ObservableCollection&lt;Chat&gt; Chats = new ObservableCollection&lt;Chat&gt;();&lt;br /&gt;&lt;br /&gt;&lt;ListView ItemsSource=&quot;{x:Static local:ChatsViewModel.Chats}&quot; x:Name=&quot;Chats&quot; ItemSelected=&quot;onItemSelected&quot;&gt;&lt;br /&gt;&lt;/pre&gt; You can even define your own: &lt;pre&gt;&lt;br /&gt;    public class ObservableString : System.ComponentModel.INotifyPropertyChanged&lt;br /&gt;    {&lt;br /&gt;        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;&lt;br /&gt;&lt;br /&gt;        string val;&lt;br /&gt;        public string Value&lt;br /&gt;        {&lt;br /&gt;            get { return val; }&lt;br /&gt;            set {&lt;br /&gt;                val = value;&lt;br /&gt;                OnPropertyChanged (&quot;Value&quot;);&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        void OnPropertyChanged(string propertyName = null)&lt;br /&gt;        {&lt;br /&gt;            if (PropertyChanged != null)&lt;br /&gt;                PropertyChanged (this, new System.ComponentModel.PropertyChangedEventArgs (propertyName));&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt; But this only seems to work with static bindings.  The more standard approach is to implement INotifyPropertyChanged for your entire ViewModel:  &lt;pre&gt;&lt;br /&gt;    public class LoginViewModel : INotifyPropertyChanged&lt;br /&gt;    {&lt;br /&gt;        bool m_isBusy = false;&lt;br /&gt;        public bool IsBusy {&lt;br /&gt;            get {&lt;br /&gt;                return m_isBusy;&lt;br /&gt;            }&lt;br /&gt;            set {&lt;br /&gt;                if (value != m_isBusy) {&lt;br /&gt;                    m_isBusy = value;&lt;br /&gt;                    OnPropertyChanged (&quot;IsBusy&quot;);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        #region INotifyPropertyChanged&lt;br /&gt;&lt;br /&gt;        public event PropertyChangedEventHandler PropertyChanged;&lt;br /&gt;&lt;br /&gt;        protected virtual void OnPropertyChanged (string propertyName)&lt;br /&gt;        {&lt;br /&gt;            var changed = PropertyChanged;&lt;br /&gt;            if (changed != null) {&lt;br /&gt;                PropertyChanged (this, new PropertyChangedEventArgs (propertyName));&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        #endregion&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt; With .Net 4.5 OnPropertyChanged can be simplified: &lt;pre&gt;&lt;br /&gt;        public bool IsBusy {&lt;br /&gt;            get {&lt;br /&gt;                return m_isBusy;&lt;br /&gt;            }&lt;br /&gt;            set {&lt;br /&gt;                if (value != m_isBusy) {&lt;br /&gt;                    m_isBusy = value;&lt;br /&gt;                    OnPropertyChanged ();&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        protected virtual void OnPropertyChanged ([System.Runtime.CompilerServices.CallerMemberName] string propertyName = &quot;&quot;)&lt;br /&gt;        { /* same as above */ }&lt;br /&gt;&lt;/pre&gt; A minor improvement, but now the compiler guarantees that the property name always matches the &quot;magic string&quot;.  There’s further improvements to reduce all the boilerplate needed to implement properties (specifically &lt;a href=&quot;http://danrigby.com/2012/01/08/inotifypropertychanged-the-anders-hejlsberg-way/&quot;&gt;this&lt;/a&gt;, and more generally like &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb126445.aspx&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://www.postsharp.net/&quot;&gt;this&lt;/a&gt;).  &lt;p/&gt; This ran a bit long, but it should wrap up the first dump of my notes on Xamarin Forms.  Next up: Callbacks, Commands, and Triggers... oh my!</content><author><name>Contact:</name></author><category term="xaml" /><category term="c#" /><category term="xamarin" /><category term="forms" /><category term="apps" /><summary type="html">This is the first part of my Xamarin Forms dive. Binding Arguably the single most important thing to master as it connects your View (UI) to the ViewModel, it's only fitting I start out with Binding (1, 2 and 3). Since I’ve been using Forms I’ve found that binding is key to getting things working but various nuances are scattered about in numerous demos. Bindings connect a &quot;source&quot; (either another UI element in the View or something in the ViewModel) to a &quot;target&quot; (some UI element in the View) that displays it. To start with, you'll see that most projects create an XML namespace that refers to a .Net assembly generated by your project: &amp;lt;!-- &quot;xmlns:local&quot; ties &quot;local&quot; XML namespace to the &quot;luck&quot; C# namespace in the &quot;luck&quot; assembly --&amp;gt;&amp;lt;ContentPage xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot; xmlns:local=&quot;clr-namespace:luck;assembly=luck&quot; x:Class=&quot;luck.MainPage&quot; &amp;gt;&amp;lt;/ContentPage&amp;gt;// &quot;local:MainViewModel&quot; in XAML thus refers to a C# class similar to:namespace luck { public class MainViewModel { // Implementation }} You can then easily create static bindings, references, and resources: &amp;lt;!-- Static --&amp;gt;&amp;lt;Label Text=&quot;{x:Static local:MainViewModel.Text}&quot; /&amp;gt;// C# ViewModelpublic class MainViewModel { public static string Text = &quot;text&quot;;}&amp;lt;!-- Reference --&amp;gt;&amp;lt;Label Text=&quot;text&quot; x:Name=&quot;MyText&quot; /&amp;gt;&amp;lt;Label Text=&quot;{x:Reference MyText}&quot; /&amp;gt;&amp;lt;!-- Resource --&amp;gt; &amp;lt;ContentPage.Resources&amp;gt; &amp;lt;ResourceDictionary&amp;gt; &amp;lt;local:LocalizationConverter x:Key=&quot;LocalizationConverter&quot; /&amp;gt; &amp;lt;/ResourceDictionary&amp;gt; &amp;lt;/ContentPage.Resources&amp;gt; &amp;lt;Label Text=&quot;{Binding SelectedItem.DisplayName, Converter={StaticResource LocalizationConverter}}&quot; /&amp;gt; There's additional information about Resources and markup extensions here, and I'll come back to ResourceDictionary a bit later in this series when I get to Styles. Alternatively, the Binding markup extension is the most common binding technique and more advanced as it supports several different properties. The easiest way of specifying a source is by setting the BindingContext for the entire Page since it is inherited by all children. This can be done either in your code-behind constructor: public MainPage (){ InitializeComponent (); BindingContext = new MainViewModel (); } or via XAML: &amp;lt;ContentPage.BindingContext&amp;gt; &amp;lt;local:MainViewModel /&amp;gt; &amp;lt;/ContentPage.BindingContext&amp;gt; You can then bind a simple value: &amp;lt;Label Text=&quot;{Binding Text}&quot; /&amp;gt;public class MainViewModel { public string Text { get; set; }} As already mentioned, Binding supports several different properties. Path specifies the property of the source to which we are binding and can be omitted if it's the first property. The following two are equivalent: &amp;lt;Label Text=&quot;{Binding Text}&quot; /&amp;gt;&amp;lt;Label Text=&quot;{Binding Path=Text}&quot; /&amp;gt; The Path property is able to access sub-properties as well as the index operator. For example: &amp;lt;Label Text=&quot;{Binding Values.Count}&quot; /&amp;gt;&amp;lt;Label Text=&quot;{Binding Values[key]}&quot; /&amp;gt;// In the ViewModelpublic Dictionary Values { get; set; } According to this, if you have large numbers of values to set you can simplify multiple indexed bindings by setting the binding context: &amp;lt;StackLayout BindingContext=&quot;{Binding Values}&quot; /&amp;gt; &amp;lt;Label Text=&quot;{Binding [key]}&quot; /&amp;gt;&amp;lt;StackLayout /&amp;gt; There is also a shorthand syntax to bind directly to the BindingContext itself: &amp;lt;Label Text=&quot;{Binding .}&quot; /&amp;gt; The Source property allows the binding to explicitly specify the &quot;source&quot; of a binding. It's analogous to the BindingContext (where the target specifies the source) and the following are equivalent: &amp;lt;Label BindingContext=&quot;{x:Reference items}&quot; Text=&quot;{Binding SelectedItem, StringFormat='{0}'}&quot; /&amp;gt;&amp;lt;Label Text=&quot;{Binding SelectedItem, Source={x:Reference items}, StringFormat='{0}'}&quot; /&amp;gt; The biggest difference being using BindingContext will be inherited by all sub-children of the UI element. At one point I found myself repeatedly specifying BindingContext and Source for a number of nested elements and then running into problems where I could no longer reference the original BindingContext, etc. In this case I had to carefully consider what I was binding where and reorganise the data provided by my ViewModel to cut back on the excessive use of Source. StringFormat can be used to apply string conversion and formatting: &amp;lt;Label Text=&quot;{Binding Value, StringFormat='Formatted {0}'}&quot; /&amp;gt; Internally it uses String.Format method so it accepts all the same forms. Note that because both .Net formatting and markup extensions use curly braces, StringFormat must be enclosed in single quotes. The Converter property is more generalised than StringFormat and also accepts an optional ConverterParameter value: &amp;lt;Label Text=&quot;{Binding SomeInt, Converter={StaticResource IntConverter}, ConverterParameter=10}&quot; /&amp;gt; public class IntConverter : IValueConverter { public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { int intparam; if (!int.TryParse(parameter as string, out intparam)) intparam = 1; return (int)value * intparam; } public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { int intparam; if (!int.TryParse(parameter as string, out intparam)) intparam = 1; return ((int)value) / intparam; } } Mode The final property Mode is available to solve some specific binding problems. I've not done anything with it just yet, so I'll refer to two relevant documents from Xamarin (1, 2) and revisit it later when I understand it better. Dynamic Bindings For values that can be changed at runtime, either the property you're binding to or the entire ViewModel needs to implement INotifyPropertyChanged interface. For example, using System.Collections.ObjectModel.ObservableCollection: public static ObservableCollection Chats = new ObservableCollection(); You can even define your own: public class ObservableString : System.ComponentModel.INotifyPropertyChanged { public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged; string val; public string Value { get { return val; } set { val = value; OnPropertyChanged (&quot;Value&quot;); } } void OnPropertyChanged(string propertyName = null) { if (PropertyChanged != null) PropertyChanged (this, new System.ComponentModel.PropertyChangedEventArgs (propertyName)); } } But this only seems to work with static bindings. The more standard approach is to implement INotifyPropertyChanged for your entire ViewModel: public class LoginViewModel : INotifyPropertyChanged { bool m_isBusy = false; public bool IsBusy { get { return m_isBusy; } set { if (value != m_isBusy) { m_isBusy = value; OnPropertyChanged (&quot;IsBusy&quot;); } } } #region INotifyPropertyChanged public event PropertyChangedEventHandler PropertyChanged; protected virtual void OnPropertyChanged (string propertyName) { var changed = PropertyChanged; if (changed != null) { PropertyChanged (this, new PropertyChangedEventArgs (propertyName)); } } #endregion } With .Net 4.5 OnPropertyChanged can be simplified: public bool IsBusy { get { return m_isBusy; } set { if (value != m_isBusy) { m_isBusy = value; OnPropertyChanged (); } } } protected virtual void OnPropertyChanged ([System.Runtime.CompilerServices.CallerMemberName] string propertyName = &quot;&quot;) { /* same as above */ } A minor improvement, but now the compiler guarantees that the property name always matches the &quot;magic string&quot;. There’s further improvements to reduce all the boilerplate needed to implement properties (specifically this, and more generally like this and this). This ran a bit long, but it should wrap up the first dump of my notes on Xamarin Forms. Next up: Callbacks, Commands, and Triggers... oh my!</summary></entry><entry><title type="html">Xamarin Forms</title><link href="http://localhost:4000/2016/03/25/xamarin-forms.html" rel="alternate" type="text/html" title="Xamarin Forms" /><published>2016-03-25T15:46:00+08:00</published><updated>2016-03-25T15:46:00+08:00</updated><id>http://localhost:4000/2016/03/25/xamarin-forms</id><content type="html" xml:base="http://localhost:4000/2016/03/25/xamarin-forms.html">While never a UI programmer or UX/UI designer, I’ve used or been exposed to several UI/layout/formatting systems over the years: LATEX, Tkinter, MFC, Scaleform, HTML/stylesheets, several in-house systems, EZGUI and uGUI in Unity, etc.  And no matter what, it seems like the UI of every project ends up horribly out of control.  Occasionally (often?) no attempt is made to embrace a sensible workflow or sanely design/organise the UI.  But, even when MVC or some other established design pattern is attempted it usually fails.  &lt;p/&gt; More often than not it’s due to lack of &lt;em&gt;really&lt;/em&gt; understanding the model, developers taking shortcuts to &quot;save time&quot; (this is really a production failure), or a disconnect with the pattern in the heat of implementation.  But, I think a framework or environment (i.e. lack of process) that permits such transgressions is just as much to blame.  &lt;p/&gt; One of the things that initially attracted me to &lt;a href=&quot;https://www.xamarin.com/platform&quot;&gt;Xamarin&lt;/a&gt; was the ability to develop multi-platform native apps in a language we were already using for other things- C#.  Additionally, via Xamarin Forms their embrace of &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/xaml-basics/data_bindings_to_mvvm/&quot;&gt;MVVM&lt;/a&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel&quot;&gt;wikipedia&lt;/a&gt;) similar to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/hh848246.aspx&quot;&gt;WPF&lt;/a&gt;.  While I don't believe in silver bullets, I do like investigating the approaches taken by different frameworks.  &lt;p/&gt; Invariably, any UI-oriented project needs superfluous animation to give it flair.  Spurned by &lt;a href=&quot;http://www.redbitdev.com/cross-platform-animations-using-xamarin-forms/&quot;&gt;this post&lt;/a&gt; I decided this was a good opportunity to investigate ways of translating design requirements into concrete implementation using Xamarin’s framework targeting MVVM.  Particularly looking at how it enables for creating a mostly data-driven UI, and permitting UI prototyping or UX/UI iteration de-coupled from writing code (an insurmountable obstacle to most non-programmers for some reason- although that’s a post for another day).  &lt;p/&gt; There’s lots of basic tutorials on getting a button on screen etc. so I’m not really covering that and assume you already have a basic understanding of Xamarin Forms.  I want to reference some of the various other sources I’ve looked at, how and why I was trying to compose things, and the problems I ran into.  For reference, this is all in the context of a companion app prototype I'm writing for our in-development PC/XboxOne MMOFPS.  Because it's still under-wraps I obviously can't post screenshots, but I'll try to present (carefully scrubbed) code.  &lt;p/&gt; This series is broken into three parts: basics, intermediate, and finally visual aspects where I tie everything together for my fabulous  programmer UX.</content><author><name>Contact:</name></author><category term="xamarin" /><category term="forms" /><summary type="html">While never a UI programmer or UX/UI designer, I’ve used or been exposed to several UI/layout/formatting systems over the years: LATEX, Tkinter, MFC, Scaleform, HTML/stylesheets, several in-house systems, EZGUI and uGUI in Unity, etc. And no matter what, it seems like the UI of every project ends up horribly out of control. Occasionally (often?) no attempt is made to embrace a sensible workflow or sanely design/organise the UI. But, even when MVC or some other established design pattern is attempted it usually fails. More often than not it’s due to lack of really understanding the model, developers taking shortcuts to &quot;save time&quot; (this is really a production failure), or a disconnect with the pattern in the heat of implementation. But, I think a framework or environment (i.e. lack of process) that permits such transgressions is just as much to blame. One of the things that initially attracted me to Xamarin was the ability to develop multi-platform native apps in a language we were already using for other things- C#. Additionally, via Xamarin Forms their embrace of MVVM (wikipedia) similar to WPF. While I don't believe in silver bullets, I do like investigating the approaches taken by different frameworks. Invariably, any UI-oriented project needs superfluous animation to give it flair. Spurned by this post I decided this was a good opportunity to investigate ways of translating design requirements into concrete implementation using Xamarin’s framework targeting MVVM. Particularly looking at how it enables for creating a mostly data-driven UI, and permitting UI prototyping or UX/UI iteration de-coupled from writing code (an insurmountable obstacle to most non-programmers for some reason- although that’s a post for another day). There’s lots of basic tutorials on getting a button on screen etc. so I’m not really covering that and assume you already have a basic understanding of Xamarin Forms. I want to reference some of the various other sources I’ve looked at, how and why I was trying to compose things, and the problems I ran into. For reference, this is all in the context of a companion app prototype I'm writing for our in-development PC/XboxOne MMOFPS. Because it's still under-wraps I obviously can't post screenshots, but I'll try to present (carefully scrubbed) code. This series is broken into three parts: basics, intermediate, and finally visual aspects where I tie everything together for my fabulous programmer UX.</summary></entry></feed>